from django_tenants.utils import schema_context
from apps.accounting.models import Account, AccountSubType, AccountType

ACCOUNT_TYPE_CODE = {
    AccountType.ASSET: 1000,
    AccountType.LIABILITY: 2000,
    AccountType.EQUITY: 3000,
    AccountType.INCOME:  4000,
    AccountType.EXPENSE:  5000
}

ACCOUNT_SUB_TYPES = [
    {
        "name": "Cash & Bank",
        "type": AccountType.ASSET,
        "description": "Use Cash & Bank for accounts where cash is readily available. "
        + "Bank accounts will appear once they're set up in Bank Reconciliation.",
    },
    {
        "name": "Current Asset",
        "type": AccountType.ASSET,
        "description": "Use Current Asset for assets that are likely "
        + "to be converted into cash within 1 year.",
    },
    {
        "name": "Long-Term Asset",
        "type": AccountType.ASSET,
        "description": "Use Long-Term Asset for assets "
        + "that will provide value for more than 1 year.",
    },
    {
        "name": "Stock",
        "type": AccountType.ASSET,
        "description": "Goods obtained for resale or manufactured for sale that "
        + "are yet unsold on any particular date is known as stock.",
    },
    {
        "name": "Property, Plant, and Equipment",
        "type": AccountType.ASSET,
        "description": "Use Property, Plant, and Equipment for fixed assets "
        + "that you own and accumulated depreciation of those assets.",
    },
    {
        "name": "Current Liability",
        "type": AccountType.LIABILITY,
        "description": "Use Current Liability for liabilities due in less than 1 year. "
        + "Credit Cards will appear once set up in Bank Reconciliation.",
    },
    {
        "name": "Long-Term Liability",
        "type": AccountType.LIABILITY,
        "description": "Use Long-Term Liability for liabilities that are due in more than 1 year.",
    },
    {
        "name": "Equity",
        "type": AccountType.EQUITY,
        "description": "Use Equity for money invested in and withdrawn from the business.",
    },
    {
        "name": "Income",
        "type": AccountType.INCOME,
        "description": "Use Income for sales generated by your business.",
    },
    {
        "name": "Cost of Goods Sold",
        "type": AccountType.EXPENSE,
        "description": "Use Cost of Goods Sold for costs that are directly "
        + "related to selling a product or service.",
    },
    {
        "name": "Operating Expense",
        "type": AccountType.EXPENSE,
        "description": "Use Operating Expenses for costs that are necessary to run your business, "
        + "but are not directly related to producing a product or service.",
    },
]


class AccountingFactory:
    def __init__(self, schema_name) -> None:
        self.schema_name = schema_name

    def generate_default_accounts(self):
        with schema_context(self.schema_name):
            sub_types = self._generate_sub_types()
            parent_accounts = self._generate_parent_accounts(sub_types)
            self._generate_sub_accounts(parent_accounts)

    def _generate_sub_accounts(self, parent_accounts):
        sub_accounts_data = self._get_sub_accounts_data(parent_accounts)
        Account.objects.bulk_create(
            [Account(**account) for account in sub_accounts_data], ignore_conflicts=True
        )

    def _generate_parent_accounts(self, sub_types):
        parent_accounts_data = self._get_parent_accounts_data(sub_types)
        Account.objects.bulk_create(
            [Account(**account) for account in parent_accounts_data],
            ignore_conflicts=True,
        )
        return Account.objects.filter(parent=None).select_related("sub_type")

    def _generate_sub_types(self):
        AccountSubType.objects.bulk_create(
            [AccountSubType(**sub_type) for sub_type in ACCOUNT_SUB_TYPES],
            ignore_conflicts=True,
        )
        return AccountSubType.objects.all()

    def _get_object(self, collection, attr_value, attr_name="name"):
        for object in collection:
            if getattr(object, attr_name) == attr_value:
                return object

    def _get_parent_accounts_data(self, sub_types):
        def get_fields(idx, code, sub_type, editable):
            sub_type = self._get_object(sub_types, sub_type)
            return {
                "code": code,
                "sub_type": sub_type,
                "editable": editable,
                "order":  ACCOUNT_TYPE_CODE[sub_type.type] + idx
            }

        return [
            {
                "name": "Cash",
                "description": "Cash is used as a parent account to organize Petty Cash and all "
                + "Bank accounts that are set up under Bank Connections.",
                **get_fields(0, "1000", "Cash & Bank", False),
            },
            {
                "name": "Accounts Receivable",
                "description": "Accounts Receivable is used to track outstanding invoices that "
                + "have been issued to your Clients and have yet to be paid. A transaction "
                + "is recorded in Accounts Receivable each time an Invoice is issued or paid.",
                **get_fields(1, "1200", "Current Asset", False),
            },
            {
                "name": "Customer Deposits",
                "description": "Use Customer Deposits to track payments this organisation makes "
                + "as a deposit or prepaid expense to Vendors.",
                **get_fields(2, "1201", "Current Asset", True),
            },
            {
                "name": "Deferred Discounts",
                "description": "Deferred Discounts is used to recognize the discounted portion "
                + "of an Invoice when a Deposit is also requested. A transaction is recorded to "
                + "Deferred Discounts when an Invoice with both a Discount and a Deposit "
                + "is issued and subsequently paid.",
                **get_fields(3, "1202", "Current Asset", True),
            },
            {
                "name": "Deposits",
                "description": "Use Deposits to track amounts you have paid in advance "
                + "to be held against future possible charges.",
                **get_fields(4, "1203", "Current Asset", True),
            },
            {
                "name": "Prepaid Expenses",
                "description": "Use Prepaid Expenses for any expenses you've paid for in advance "
                + "and won't recognize until your next accounting period.",
                **get_fields(5,  "1204", "Current Asset", True),
            },
            {
                "name": "Inventory Asset",
                "description": "Inventory Asset tracks the value of goods in our inventory",
                **get_fields(6, "1300", "Stock", False),
            },
            {
                "name": "Property, Plant, and Equipment",
                "description": "Property, Plant, and Equipment is a parent account used "
                + "to organize Fixed Asset accounts.",
                **get_fields(7, "1500", "Property, Plant, and Equipment", True),
            },
            {
                "name": "Accounts Payable",
                "description": "Accounts Payable tracks outstanding Bills that have been issued "
                + "to you and have yet to be paid. A transaction is recorded in Accounts Payable "
                + "each time a Bill is issued or paid.",
                **get_fields(0,  "2000", "Current Liability", False),
            },
            {
                "name": "Accruals",
                "description": "Use Accruals to track expenses or bills that you've recorded "
                + "but haven't yet paid.",
                **get_fields(1, "2001", "Current Liability", True),
            },
            {
                "name": "Credit Cards",
                "description": "Credit Cards is a parent account used to organize Credit Cards "
                + "that are set up under Bank Connections.",
                **get_fields(2, "2003", "Current Liability", False),
            },
            {
                "name": "Customer Credit",
                "description": "Customer Credit is used to track a liability for products "
                + "or services owed to your Clients. A transaction is recorded to Customer Credit "
                + "when an Overpayment Credit, Prepayment Credit or "
                + "Credit Note is created or applied as payment.",
                **get_fields(3, "2004", "Current Liability", False),
            },
            {
                "name": "Taxes Payable",
                "description": "Taxes Payable is used as a parent account to organize sales tax "
                + "accounts that are automatically created for each tax rate that has been set up."
                + " Transactions are recorded to Sales Tax Payable accounts when sales tax "
                + "is applied to Income (i.e. on Invoices, Checkout Links and Other Income).",
                **get_fields(4, "2005", "Current Liability", False),
            },
            {
                "name": "Unearned Revenue",
                "description": "Unearned Revenue is used to track a liability "
                + "for products or services owed to your Clients when you request a deposit. "
                + "A transaction is recorded to Unearned Revenue when a deposit is requested "
                + "and paid by the Client.",
                **get_fields(5, "2006", "Current Liability", False),
            },
            {
                "name": "Opening Balance Adjustments",
                "description": "This account will hold the difference in the debits and credits "
                + "entered during the opening balance.",
                **get_fields(6, "2007", "Current Liability", False),
            },
            {
                "name": "Common Stock",
                "description": "Common Stock is used to track ownership in this "
                + "organisation in the form of common shares.",
                **get_fields(0, "3000", "Equity", True),
            },
            {
                "name": "Opening Balance",
                "description": "Opening Balance is a parent account used to organize "
                + "Opening Balance Adjustment accounts.",
                **get_fields(1, "3001", "Equity", False),
            },
            {
                "name": "Owner's Equity",
                "description": "Owner's Equity is used to track owner contributions and "
                + "withdrawals to and from the business. A transaction is recorded to "
                + "Owner's Equity when it is marked as Owner's Equity in Bank Reconciliation.",
                **get_fields(2, "3002", "Equity", False),
            },
            {
                "name": "Retained Earnings",
                "description": "Retained Earnings is used to track the Net Income, or "
                + "accumulated earnings from all previous years that the business "
                + "has been in operation.",
                **get_fields(3, "3003", "Equity", False),
            },
            {
                "name": "Revenue",
                "description": "Revenue is a parent account used to organize all accounts "
                + "that impact Revenue.",
                **get_fields(0, "4000", "Income", False),
            },
            {
                "name": "Cost of Goods Sold",
                **get_fields(0, "5000", "Cost of Goods Sold", True),
            },
            {
                "name": "Advertising",
                **get_fields(1, "6001", "Operating Expense", True),
            },
            {
                "name": "Car & Truck Expenses",
                **get_fields(2, "6002", "Operating Expense", True),
            },
            {
                "name": "Contractors",
                **get_fields(3, "6003", "Operating Expense", True),
            },
            {
                "name": "Education & Training",
                **get_fields(4, "6004", "Operating Expense", True),
            },
            {
                "name": "Employee Benefits",
                **get_fields(5, "6005", "Operating Expense", True),
            },
            {
                "name": "Meals & Entertainment",
                **get_fields(6, "6006", "Operating Expense", True),
            },
            {
                "name": "Office Expenses & Postage",
                **get_fields(7, "6007", "Operating Expense", True),
            },
            {
                "name": "Other Expenses",
                **get_fields(8, "6008", "Operating Expense", True),
            },
            {
                "name": "Personal",
                **get_fields(9, "6009", "Operating Expense", True),
            },
            {
                "name": "Professional Services",
                **get_fields(10, "6010", "Operating Expense", True),
            },
            {
                "name": "Rent or Lease",
                **get_fields(11, "6011", "Operating Expense", True),
            },
            {
                "name": "Supplies",
                **get_fields(12, "6012", "Operating Expense", True),
            },
            {
                "name": "Travel",
                **get_fields(13, "6013", "Operating Expense", True),
            },
            {
                "name": "Uncategorised Expenses",
                **get_fields(14, "6014", "Operating Expense", False),
            },
            {
                "name": "Utilities",
                **get_fields(15, "6015", "Operating Expense", True),
            },
            {
                "name": "Sales Taxes Paid",
                **get_fields(16, "6016", "Operating Expense", False),
            },
        ]

    def _get_sub_accounts_data(self, parent_accounts):
        def get_fields(parent_account_name, value_for_editable_field=False):
            parent = self._get_object(parent_accounts, parent_account_name)
            return {
                "parent": parent,
                "sub_type": parent.sub_type,
                "editable": value_for_editable_field,
                "order": parent.order
            }

        def generate_editable_accounts(account_names, parent_account_name):
            accounts = []
            parent = self._get_object(parent_accounts, parent_account_name)
            for count, name in enumerate(account_names, start=1):
                accounts.append(
                    {
                        "name": name,
                        "code": f"{parent.code}-{count}",
                        **get_fields(parent.name, True),
                    }
                )
            return accounts

        return [
            {
                "name": "Petty Cash",
                "code": "1000-1",
                "description": "Petty Cash is used to track all cash activity. "
                + "A transaction is recorded to Petty Cash when payment is applied to an "
                + "Invoice or an Expense is entered. To attribute these transactions "
                + "to a Bank or Credit Card account, match them in Bank Reconciliation.",
                **get_fields("Cash", False),
            },
            {
                "name": "Furniture",
                "code": "1500-1",
                "description": "Use Furniture to track any furniture or fixtures your business "
                + "owns and uses to operate.",
                **get_fields("Property, Plant, and Equipment", True),
            },
            {
                "name": "Furniture - Accumulated Depreciation",
                "code": "1500-2",
                "description": "Use Furniture - Accumulate Depreciation to track how much "
                + "your furniture has depreciated over time.",
                **get_fields("Property, Plant, and Equipment", True),
            },
            {
                "name": "Office Equipment",
                "code": "1500-3",
                "description": "Use Office Equipment to track any equipment your business owns  "
                + "and uses to operate.",
                **get_fields("Property, Plant, and Equipment", True),
            },
            {
                "name": "Office Equipment - Accumulated Depreciation",
                "code": "1500-4",
                "description": "Use Office Equipment - Accumulated Depreciation to track how much "
                + "your equipment has depreciated over time.",
                **get_fields("Property, Plant, and Equipment", True),
            },
            {
                "name": "Accrued Payroll",
                "code": "2001-1",
                "description": "Use Accrued Payroll to track amounts related to payroll that "
                + "have been accrued and not yet paid.",
                **get_fields("Accruals", True),
            },
            {
                "name": "Accrued Rent",
                "code": "2001-2",
                "description": "Use Accrued Payroll to track amounts related to rent that "
                + "have been accrued and not yet paid.",
                **get_fields("Accruals", True),
            },
            {
                "name": "Income Tax Payable",
                "code": "2005-1",
                "description": "Use this to track income taxes to be paid to local authorities.",
                **get_fields("Taxes Payable", True),
            },
            {
                "name": "Property Tax Payable",
                "code": "2005-2",
                "description": "Use this to track property taxes to be paid "
                + "on real estate your business owns.",
                **get_fields("Taxes Payable", True),
            },
            {
                "name": "Opening Balance Adjustments",
                "code": "3001-1",
                "description": "Opening Balance Adjustments is used to ensure that your books "
                + "stay in balance. A transaction is recorded to Opening Balance Adjustments "
                + "when an opening balance is entered in Bank Reconciliation.",
                **get_fields("Opening Balance", False),
            },
            {
                "name": "Dividends",
                "code": "3003-1",
                "description": "Use Dividends to record the amount of dividends "
                + "that this organisation has declared.",
                **get_fields("Retained Earnings", True),
            },
            {
                "name": "Billed Expenses",
                "code": "4000-1",
                "description": "Billed Expenses is used to track the Revenue from expenses "
                + "that have been rebilled to a Client. A transaction is recorded to "
                + "Billed Expenses when an expense is added to an Invoice issued to a Client.",
                **get_fields("Revenue", False),
            },
            {
                "name": "Discounts",
                "code": "4000-2",
                "description": "Discounts is used to track the discounts applied against Sales. "
                + "A transaction is recorded to Discounts anytime a discount is applied "
                + "to an Invoice.",
                **get_fields("Revenue", False),
            },
            {
                "name": "Sales",
                "code": "4000-3",
                "description": "Sales is issued to track Revenue your business earns. "
                + "Transactions are recorded to Sales when an Invoice is generated, "
                + "a Checkout link is created or Other Income is entered.",
                **get_fields("Revenue", False),
            },
            {
                "name": "Sales Credit",
                "code": "4000-4",
                "description": "Use Sales Credit as a contra revenue account to track "
                + "the value of products or services offered to your Clients as a Credit.",
                **get_fields("Revenue", True),
            },
            {
                "name": "Uncategorized Income",
                "code": "4000-5",
                "description": "Uncategorized Income is used to track income "
                + "that is yet to be categorized.",
                **get_fields("Revenue", False),
            },
            *generate_editable_accounts(
                ["Cost of Billed Expenses", "Cost of Shipping & Handling"],
                "Cost of Goods Sold",
            ),
            *generate_editable_accounts(
                ["Gas", "Mileage", "Repairs", "Vehicle Insurance", "Vehicle Licensing"],
                "Car & Truck Expenses",
            ),
            *generate_editable_accounts(
                ["Accident Insurance", "Health Insurance", "Life Insurance"],
                "Employee Benefits",
            ),
            *generate_editable_accounts(
                ["Entertainment", "Restaurants/Dining"],
                "Meals & Entertainment",
            ),
            *generate_editable_accounts(
                [
                    "Hardware",
                    "Office Supplies",
                    "Packaging",
                    "Postage",
                    "Printing",
                    "Shipping & Couriers",
                    "Software",
                    "Stationery",
                ],
                "Office Expenses & Postage",
            ),
            *generate_editable_accounts(
                [
                    "Bank Fees",
                    "Business Insurance",
                    "Commissions",
                    "Depreciation",
                    "Interest - Mortgage",
                    "Interest - Other",
                    "Online Services",
                    "Reference Materials",
                    "Repairs & Maintenance",
                    "Subscriptions/Dues/Memberships",
                    "Taxes & Licenses",
                    "Wages",
                ],
                "Other Expenses",
            ),
            *generate_editable_accounts(
                ["Accounting", "Legal Fees"],
                "Professional Services",
            ),
            *generate_editable_accounts(
                ["Equipment", "Machinery", "Office Space", "Vehicles"],
                "Rent or Lease",
            ),
            *generate_editable_accounts(
                ["Airfare", "Hotel/Lodging/Accomodation", "Taxi & Parking"],
                "Travel",
            ),
            *generate_editable_accounts(
                ["Gas & Electrical", "Phone"],
                "Utilities",
            ),
        ]
